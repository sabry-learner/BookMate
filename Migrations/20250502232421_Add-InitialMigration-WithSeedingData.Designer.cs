// <auto-generated />
using System;
using BookMate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookMate.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502232421_Add-InitialMigration-WithSeedingData")]
    partial class AddInitialMigrationWithSeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookMate.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("INT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Robert C. Martin",
                            DifficultyLevel = "Hard",
                            Genre = "Science",
                            Pages = 464,
                            Title = "Clean Code"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Paulo Coelho",
                            DifficultyLevel = "Easy",
                            Genre = "Fiction",
                            Pages = 208,
                            Title = "The Alchemist"
                        });
                });

            modelBuilder.Entity("BookMate.Entities.BookSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuggestedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("SuggestionText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BookSuggestions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SuggestedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SuggestionText = "You must read 'Atomic Habits'.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            SuggestedAt = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SuggestionText = "Try reading '1984' by George Orwell.",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookMate.Entities.ReadingSession", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<string>("Mood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("Rating")
                        .HasColumnType("INT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("ReadingSessions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            Mood = "Relaxed",
                            Notes = "Great focus session.",
                            Rating = 5,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            Mood = "Tired",
                            Notes = "Lost concentration.",
                            Rating = 2,
                            StartTime = new TimeSpan(0, 14, 30, 0, 0),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookMate.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ahmed@example.com",
                            JoinDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ahmed Sabry"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mona@example.com",
                            JoinDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mona Ali"
                        });
                });

            modelBuilder.Entity("BookMate.Entities.BookSuggestion", b =>
                {
                    b.HasOne("BookMate.Entities.User", "User")
                        .WithMany("BookSuggestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookMate.Entities.ReadingSession", b =>
                {
                    b.HasOne("BookMate.Entities.Book", "Book")
                        .WithMany("ReadingSessions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookMate.Entities.User", "User")
                        .WithMany("ReadingSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookMate.Entities.User", b =>
                {
                    b.OwnsOne("BookMate.Entities.GenreStats", "GenreStats", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<double>("AverageRating")
                                .HasColumnType("float");

                            b1.Property<string>("FavoriteGenre")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar");

                            b1.Property<int>("TotalPagesRead")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("GenreStats");
                });

            modelBuilder.Entity("BookMate.Entities.Book", b =>
                {
                    b.Navigation("ReadingSessions");
                });

            modelBuilder.Entity("BookMate.Entities.User", b =>
                {
                    b.Navigation("BookSuggestions");

                    b.Navigation("ReadingSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
